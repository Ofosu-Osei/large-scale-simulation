/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    //id 'com.bmuschko.clover' version '3.0.7'
    id 'org.springframework.boot' version '3.2.5' 
    id 'io.spring.dependency-management' version '1.1.4'  
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    testImplementation 'org.junit.platform:junit-platform-launcher:1.11.4'
    testImplementation 'org.mockito:mockito-core:3+'
    //clover 'org.openclover:clover:4.5.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
    // This dependency is used by the application.
    implementation libs.guava
    // json reader
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.3'
    //spring boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Spring Boot WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'edu.duke.ece651.simulationserver.App'
    applicationName = 'simulation'
}

bootRun {
    mainClass = 'edu.duke.ece651.SimulationApp'
    
    if (project.hasProperty('nw')) {
        mainClass = 'edu.duke.ece651.simulationserver.App'
        args = ["${project.rootDir}/app/src/test/resources/doors1.json"]
        standardInput = System.in
    }
}

task runSim(type: JavaExec) {
    group = 'application'
    description = 'Run the simulation server'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'edu.duke.ece651.simulationserver.App'
    args = ["${project.rootDir}/app/src/test/resources/doors1.json"]
    standardInput = System.in
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
test{
    testLogging{
        showStandardStreams=true
        exceptionFormat='full'
    }
}

clover{
    compiler {
        additionalArgs = "-g:lines,source,vars"
    }
    report {
        xml=true
        html = true
    }
    excludes = [
        '**/Request.java',
        '**/RequestState.java'
    ]
}
