/*
 * This source file was generated by the Gradle 'init' task
 */
package edu.duke.ece651.simulationserver;

import static org.junit.jupiter.api.Assertions.*;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.parallel.ResourceAccessMode;
import org.junit.jupiter.api.parallel.ResourceLock;
import org.junit.jupiter.api.parallel.Resources;

class AppTest {
  // @Test void appHasAGreeting() {
  //       App classUnderTest = new App();
  //       assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
  //   }

  // @Test
  // @ResourceLock(value = Resources.SYSTEM_OUT, mode = ResourceAccessMode.READ_WRITE)
  // public void test_main() throws IOException {
  //     String[] args = new String[] {"src/test/resources/doors1.json"};
  //     InputStream input = getClass().getClassLoader().getResourceAsStream("doors1-input1.txt");
  //     InputStream oldIn = System.in;
  //     // PrintStream oldOut = System.out;
  //     try {
  //       System.setIn(input);
  //       // System.setOut(out);
  //       App.main(args);
  //     } finally {
  //       System.setIn(oldIn);
  //       // System.setOut(oldOut);
  //     }
  //   }

  @Disabled
  @Test
  @ResourceLock(value = Resources.SYSTEM_OUT, mode = ResourceAccessMode.READ_WRITE)
  public void test_main() throws IOException {
    App.main(new String[2]);

    String[] args = new String[] {"src/test/resources/doors1.json"};
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    PrintStream out = new PrintStream(bytes, true);
    InputStream input = getClass().getClassLoader().getResourceAsStream("doors1-input1.txt");
    InputStream expectedStream = getClass().getClassLoader().getResourceAsStream("doors1-output1.txt");
    InputStream oldIn = System.in;
    PrintStream oldOut = System.out;
    try {
      System.setIn(input);
      System.setOut(out);
      App.main(args);
    } finally {
      System.setIn(oldIn);
      System.setOut(oldOut);
    }
    String expected = new String(expectedStream.readAllBytes());
    String actual = bytes.toString();
    assertEquals(expected, actual);
  }

  @Disabled
  @Test
  @ResourceLock(value = Resources.SYSTEM_OUT, mode = ResourceAccessMode.READ_WRITE)
  public void test_main2() throws IOException {
    Request.resetIdGenerator();
    App.main(new String[2]);

    String[] args = new String[] {"src/test/resources/doors1.json"};
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    PrintStream out = new PrintStream(bytes, true);
    InputStream input = getClass().getClassLoader().getResourceAsStream("doors1-input2.txt");
    InputStream expectedStream = getClass().getClassLoader().getResourceAsStream("doors1-output2.txt");
    InputStream oldIn = System.in;
    PrintStream oldOut = System.out;
    try {
      System.setIn(input);
      System.setOut(out);
      App.main(args);
    } finally {
      System.setIn(oldIn);
      System.setOut(oldOut);
    }
    String expected = new String(expectedStream.readAllBytes());
    String actual = bytes.toString();
    assertEquals(expected, actual);
  }
}
